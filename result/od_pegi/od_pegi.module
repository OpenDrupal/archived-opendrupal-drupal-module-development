<?php

/**
 * @file
 * Drupal hook implementations for OpenDrupal Pegi module.
 */

/**
 * The node type used for Game review content.
 */
define('OD_PEGI_GAME_CONTENT_TYPE', 'game');

/**
 * The taxonomy vocabulary used for Pegi categories.
 */
define('OD_PEGI_TAXONOMY_VOCABULARY', 'pegi_rating');

/**
 * The field that is used to reference from the game to its Pegy category.
 */
define('OD_PEGI_GAME_REFERENCE', 'field__ref_pegi');

/**
 * The Pegi taxonomy term field that contains the allowed age.
 */
define('OD_PEGI_FIELD_ALLOWED_AGE', 'field_allowed_age');

/**
 * The profile field that contains the user's age.
 */
define('OD_PEGI_FIELD_USER_AGE', 'field_user_age');

/**
 * The field that contains the pegi label image.
 */
define('OD_PEGI_TERM_IMAGE_FIELD', 'field_pegi_image');

use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\user\Entity\User;
use Drupal\Core\Access\AccessResult;

/**
 * Implements hook_form_alter().
 *
 * Uncomment this function to determine the form ID of forms on any page. This
 * is a frequently use trick to find the ID. hook_form_alter() is execute on
 * all forms, but for performance it is preferred to implement
 * hook_form_FORM_ID_alter().
 */
/*
function od_pegi_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  debug($form_id);
}
//*/

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alters the user login form. Removes the description from the password field.
 */
function od_pegi_form_user_login_form_alter(&$form, FormStateInterface $form_state) {

  // Note that &$form passes the form array by reference. The changes you to
  // $form you make here will change the actual form.
  unset($form['pass']['#description']);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alters the user registration form. Changes the order fields.
 */
function od_pegi_form_user_register_form_alter(&$form, FormStateInterface $form_state) {

  // The mail and name fields are grouped in 'account'. Adding field to existing
  // field groups like these may have unwanted side effects. Be careful.
  $form['account']['mail']['#weight'] = 1;
  $form['account']['name']['#weight'] = 3;
  $form['account']['field_user_age'] = $form['field_user_age'];
  $form['account']['field_user_age']['#weight'] = 2;
  unset($form['field_user_age']);
}

/**
 * Implements hook_ENTITY_TYPE_access().
 *
 * Drupal has two mechanism for access control. One at database level and
 * one using fully loaded entities. The first one (using hook_node_grants()
 * and hook_node_access_records()) is preferred for performance. The second
 * (using hook_ENTITY_TYPE_access()) uses the fully loaded entity and is
 * preferred for edit and delete operations. It allows access check on dynamic
 * data, but performs less for 'view' operations because the entity has to be
 * loaded before access can be checked.
 *
 * @see hook_ENTITY_TYPE_access()
 */
function od_pegi_node_access(EntityInterface $entity, $operation, AccountInterface $account) {
  /** @var \Drupal\node\Entity\Node $entity */
  $access = AccessResult::neutral();

  // @todo Use node_access_grants for content access.
  if ($operation == 'view' && $entity->hasField(OD_PEGI_GAME_REFERENCE)) {
    $pegi_entities = $entity->{OD_PEGI_GAME_REFERENCE}->referencedEntities();
    if ($pegi_entities) {
      $allowed_age = $pegi_entities[0]->{OD_PEGI_FIELD_ALLOWED_AGE}->value;

      /** @var \Drupal\user\Entity\User $user */
      $user = User::load($account->id());
      $age = $user->{OD_PEGI_FIELD_USER_AGE}->value;

      // Deny access when user is too young. If old enough, we return an
      // instantiated AccessResult object that neither explicitly allows nor
      // explicitly forbids access. Other modules can still deny access. If too
      // young we explicitly forbid access.
      if ($age < $allowed_age) {
        $access = AccessResult::forbidden();
      }
    }
  }

  return $access;
}

/**
 * Implements hook_entity_insert().
 */
function od_pegi_entity_insert(EntityInterface $entity) {

  // Invalidated the od_pegi_new_games blocks caches.
  if ($entity->bundle() == 'game') {
    Cache::invalidateTags(['od_pegi.new_game']);
  }
}
